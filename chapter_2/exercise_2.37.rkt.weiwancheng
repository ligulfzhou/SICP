#lang racket
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define nil '())

(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))
;;------------------------------------------------------------
(define (dot-product v w)
  (accumulate + 0 (map * v w)))

(dot-pruduct (list 2 3) (list 6 7)) 
;; -- > 2 * 6 + 3 * 7 --> 37
;;--------------------------------------------------------------
;;---> vector * vector --> all coordinate position` times output`s sum
(define (matrix-*-vector m v)
  (map (lambda (row) (dot-product row v)) m))

(matrix-*-vector '[(1 2 3) (4 5 6) (7 8 9)] '(1 2 3))
;;-----------------------------------------------------------------
(define (transpose m)
  (accumulate-n cons nil m))

(transpose '[(1 2 3) (4 5 6) (7 8 9)])
;;--------------------------------------------------------------
(define (matrix-*-matrix m n)
  (let ((col (transpose n)))
    (map 
